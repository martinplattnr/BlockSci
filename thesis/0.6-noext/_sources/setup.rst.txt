Local setup
=====================

BlockSci is composed of two major components, the parser, and the analysis library. The parser is used to generate the backing BlockSci database format. The analysis library can then be pointed at the generated data.

Note that BlockSci runs best with 64GB of RAM or above though 32 GB is feasible although much slower.

BlockSci Parser
-----------------

The BlockSci parser extracts blockchain data generated by a full node (such as bitcoind or an altcoin node). Thus, to set up BlockSci, you must first run a full node.

The BlockSci parser provides two different mechanisms for processing blockchain data, a disk mode and an RPC mode.

- Disk mode is optimized for parsing Bitcoin's data files. It reads blockchain data directly from disk in a rapid manner. However this means that it does not work on many other blockchains which have different serialization formats than Bitcoin.
- RPC mode uses the RPC interface of a cryptocurrency to extract data regarding the blockchain. It works with a variety of cryptocurrencies which have the same general model as Bitcoin, but with minor changes to the serialization format which break the parser in disk mode. Examples of this are Zcash and Namecoin. To use the parser in RPC mode, your full node must be running with ``txindex`` enabled.

Before you can parse a blockchain, you'll need to generate a config file.

.. code-block:: bash

	blocksci_parser <config file> generate-config <coin type> <data directory> [--max-block <max block>] [--disk <coin directory>] [--rpc <username> <password> [--address <address>] [--port <port>]]

BlockSci provides defaults for the most common cryptocurrencies, including Bitcoin, Bitcoin Cash, Litecoin, Dash, Namecoin and ZCash.
These can be selected through the ``<coin type>`` field (simply run ``blocksci_parser`` to see all the options available).
BlockSci does, however, not provide defaults for the data directories, as they differ between operating systems.
You'll thus need to provide information for either the ``--disk`` or the ``--rpc`` option.

After creating the config file, you can parse the blockchain by running:

.. code-block:: bash

	blocksci_parser <config file> update


Incremental updates
--------------------

BlockSci can be kept up to date with the blockchain by setting up a cronjob to periodically run the parser command. Updates to the parser should not noticeably impact usage of the analysis library. It is recommended that the Blockchain be kept approximately 6 blocks back from the head of the chain in order to avoid imperfect reorg handling in BlockSci.

For example, you can set BlockSci to stay 6 blocks behind the head of the chain by setting `"maxBlockNum": -6` in your config file and adding

..  code-block:: bash

	@hourly /usr/local/bin/blocksci_parser <config file> update

to your system crontab_.

.. _crontab: https://help.ubuntu.com/community/CronHowto


Mempool Recorder
------------------

BlockSci provides an optional mempool recorder will record the arrival times of blocks and transactions at your local node. The recorder works by repeatedly pinging the RPC interface and obvserving as new transactions arrive. This data is accessible directly through the python API via `Tx.time_seen` and `Block.time_seen` which will return a datetime or `None` if the transaction or block was not observed. To use the mempool recorder, you need to have continuous incremental updates enabled (see above) and a valid RPC section in your config file.

..  code-block:: bash

	mempool_recorder <config file>


Clusterer
------------------

BlockSci provides a clustering module to apply heuristic based clustering techniques. We recommend using it through the Python :py:mod:`blocksci.cluster` module.

If you instead prefer to use the standalone tool, you can run it as follows.

..  code-block:: bash

    blocksci_clusterer <data location> <cluster output directory> [--overwrite]
